#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace FJWU_StudentSurvey
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="FJWU_StudentSurvey")]
	public partial class FJWUSurveyDBDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertApplicationUser(ApplicationUser instance);
    partial void UpdateApplicationUser(ApplicationUser instance);
    partial void DeleteApplicationUser(ApplicationUser instance);
    partial void InsertCourse(Course instance);
    partial void UpdateCourse(Course instance);
    partial void DeleteCourse(Course instance);
    partial void InsertQuestion(Question instance);
    partial void UpdateQuestion(Question instance);
    partial void DeleteQuestion(Question instance);
    partial void InsertStudent(Student instance);
    partial void UpdateStudent(Student instance);
    partial void DeleteStudent(Student instance);
    partial void InsertSurveyAnswer(SurveyAnswer instance);
    partial void UpdateSurveyAnswer(SurveyAnswer instance);
    partial void DeleteSurveyAnswer(SurveyAnswer instance);
    partial void InsertSurveyQuestion(SurveyQuestion instance);
    partial void UpdateSurveyQuestion(SurveyQuestion instance);
    partial void DeleteSurveyQuestion(SurveyQuestion instance);
    partial void InsertTeacher(Teacher instance);
    partial void UpdateTeacher(Teacher instance);
    partial void DeleteTeacher(Teacher instance);
    partial void InsertSurvey(Survey instance);
    partial void UpdateSurvey(Survey instance);
    partial void DeleteSurvey(Survey instance);
    #endregion
		
		public FJWUSurveyDBDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["FJWU_StudentSurveyConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public FJWUSurveyDBDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public FJWUSurveyDBDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public FJWUSurveyDBDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public FJWUSurveyDBDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<ApplicationUser> ApplicationUsers
		{
			get
			{
				return this.GetTable<ApplicationUser>();
			}
		}
		
		public System.Data.Linq.Table<Course> Courses
		{
			get
			{
				return this.GetTable<Course>();
			}
		}
		
		public System.Data.Linq.Table<Question> Questions
		{
			get
			{
				return this.GetTable<Question>();
			}
		}
		
		public System.Data.Linq.Table<Student> Students
		{
			get
			{
				return this.GetTable<Student>();
			}
		}
		
		public System.Data.Linq.Table<SurveyAnswer> SurveyAnswers
		{
			get
			{
				return this.GetTable<SurveyAnswer>();
			}
		}
		
		public System.Data.Linq.Table<SurveyQuestion> SurveyQuestions
		{
			get
			{
				return this.GetTable<SurveyQuestion>();
			}
		}
		
		public System.Data.Linq.Table<Teacher> Teachers
		{
			get
			{
				return this.GetTable<Teacher>();
			}
		}
		
		public System.Data.Linq.Table<Survey> Surveys
		{
			get
			{
				return this.GetTable<Survey>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ApplicationUsers")]
	public partial class ApplicationUser : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UserId;
		
		private string _UserName;
		
		private string _Password;
		
		private System.Nullable<int> _UserMapping;
		
		private int _UserPermission;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserIdChanging(int value);
    partial void OnUserIdChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnUserMappingChanging(System.Nullable<int> value);
    partial void OnUserMappingChanged();
    partial void OnUserPermissionChanging(int value);
    partial void OnUserPermissionChanged();
    #endregion
		
		public ApplicationUser()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this.OnUserNameChanging(value);
					this.SendPropertyChanging();
					this._UserName = value;
					this.SendPropertyChanged("UserName");
					this.OnUserNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserMapping", DbType="Int")]
		public System.Nullable<int> UserMapping
		{
			get
			{
				return this._UserMapping;
			}
			set
			{
				if ((this._UserMapping != value))
				{
					this.OnUserMappingChanging(value);
					this.SendPropertyChanging();
					this._UserMapping = value;
					this.SendPropertyChanged("UserMapping");
					this.OnUserMappingChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserPermission", DbType="Int NOT NULL")]
		public int UserPermission
		{
			get
			{
				return this._UserPermission;
			}
			set
			{
				if ((this._UserPermission != value))
				{
					this.OnUserPermissionChanging(value);
					this.SendPropertyChanging();
					this._UserPermission = value;
					this.SendPropertyChanged("UserPermission");
					this.OnUserPermissionChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Courses")]
	public partial class Course : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CourseID;
		
		private string _CourseName;
		
		private string _CourseSession;
		
		private EntitySet<Survey> _Surveys;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCourseIDChanging(int value);
    partial void OnCourseIDChanged();
    partial void OnCourseNameChanging(string value);
    partial void OnCourseNameChanged();
    partial void OnCourseSessionChanging(string value);
    partial void OnCourseSessionChanged();
    #endregion
		
		public Course()
		{
			this._Surveys = new EntitySet<Survey>(new Action<Survey>(this.attach_Surveys), new Action<Survey>(this.detach_Surveys));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CourseID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CourseID
		{
			get
			{
				return this._CourseID;
			}
			set
			{
				if ((this._CourseID != value))
				{
					this.OnCourseIDChanging(value);
					this.SendPropertyChanging();
					this._CourseID = value;
					this.SendPropertyChanged("CourseID");
					this.OnCourseIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CourseName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string CourseName
		{
			get
			{
				return this._CourseName;
			}
			set
			{
				if ((this._CourseName != value))
				{
					this.OnCourseNameChanging(value);
					this.SendPropertyChanging();
					this._CourseName = value;
					this.SendPropertyChanged("CourseName");
					this.OnCourseNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CourseSession", DbType="VarChar(50)")]
		public string CourseSession
		{
			get
			{
				return this._CourseSession;
			}
			set
			{
				if ((this._CourseSession != value))
				{
					this.OnCourseSessionChanging(value);
					this.SendPropertyChanging();
					this._CourseSession = value;
					this.SendPropertyChanged("CourseSession");
					this.OnCourseSessionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Course_Survey", Storage="_Surveys", ThisKey="CourseID", OtherKey="CourseId")]
		public EntitySet<Survey> Surveys
		{
			get
			{
				return this._Surveys;
			}
			set
			{
				this._Surveys.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Surveys(Survey entity)
		{
			this.SendPropertyChanging();
			entity.Course = this;
		}
		
		private void detach_Surveys(Survey entity)
		{
			this.SendPropertyChanging();
			entity.Course = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Questions")]
	public partial class Question : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _QuestionId;
		
		private string _QuestionText;
		
		private EntitySet<SurveyQuestion> _SurveyQuestions;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnQuestionIdChanging(int value);
    partial void OnQuestionIdChanged();
    partial void OnQuestionTextChanging(string value);
    partial void OnQuestionTextChanged();
    #endregion
		
		public Question()
		{
			this._SurveyQuestions = new EntitySet<SurveyQuestion>(new Action<SurveyQuestion>(this.attach_SurveyQuestions), new Action<SurveyQuestion>(this.detach_SurveyQuestions));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QuestionId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int QuestionId
		{
			get
			{
				return this._QuestionId;
			}
			set
			{
				if ((this._QuestionId != value))
				{
					this.OnQuestionIdChanging(value);
					this.SendPropertyChanging();
					this._QuestionId = value;
					this.SendPropertyChanged("QuestionId");
					this.OnQuestionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QuestionText", DbType="VarChar(50)")]
		public string QuestionText
		{
			get
			{
				return this._QuestionText;
			}
			set
			{
				if ((this._QuestionText != value))
				{
					this.OnQuestionTextChanging(value);
					this.SendPropertyChanging();
					this._QuestionText = value;
					this.SendPropertyChanged("QuestionText");
					this.OnQuestionTextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Question_SurveyQuestion", Storage="_SurveyQuestions", ThisKey="QuestionId", OtherKey="Question")]
		public EntitySet<SurveyQuestion> SurveyQuestions
		{
			get
			{
				return this._SurveyQuestions;
			}
			set
			{
				this._SurveyQuestions.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_SurveyQuestions(SurveyQuestion entity)
		{
			this.SendPropertyChanging();
			entity.Question1 = this;
		}
		
		private void detach_SurveyQuestions(SurveyQuestion entity)
		{
			this.SendPropertyChanging();
			entity.Question1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Students")]
	public partial class Student : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _StudentId;
		
		private string _StudentName;
		
		private EntitySet<SurveyAnswer> _SurveyAnswers;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnStudentIdChanging(int value);
    partial void OnStudentIdChanged();
    partial void OnStudentNameChanging(string value);
    partial void OnStudentNameChanged();
    #endregion
		
		public Student()
		{
			this._SurveyAnswers = new EntitySet<SurveyAnswer>(new Action<SurveyAnswer>(this.attach_SurveyAnswers), new Action<SurveyAnswer>(this.detach_SurveyAnswers));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StudentId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int StudentId
		{
			get
			{
				return this._StudentId;
			}
			set
			{
				if ((this._StudentId != value))
				{
					this.OnStudentIdChanging(value);
					this.SendPropertyChanging();
					this._StudentId = value;
					this.SendPropertyChanged("StudentId");
					this.OnStudentIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StudentName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string StudentName
		{
			get
			{
				return this._StudentName;
			}
			set
			{
				if ((this._StudentName != value))
				{
					this.OnStudentNameChanging(value);
					this.SendPropertyChanging();
					this._StudentName = value;
					this.SendPropertyChanged("StudentName");
					this.OnStudentNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Student_SurveyAnswer", Storage="_SurveyAnswers", ThisKey="StudentId", OtherKey="Student")]
		public EntitySet<SurveyAnswer> SurveyAnswers
		{
			get
			{
				return this._SurveyAnswers;
			}
			set
			{
				this._SurveyAnswers.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_SurveyAnswers(SurveyAnswer entity)
		{
			this.SendPropertyChanging();
			entity.Student1 = this;
		}
		
		private void detach_SurveyAnswers(SurveyAnswer entity)
		{
			this.SendPropertyChanging();
			entity.Student1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SurveyAnswers")]
	public partial class SurveyAnswer : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SurveyAnswer1;
		
		private string _Answer;
		
		private int _Student;
		
		private int _SurveyQuestion;
		
		private EntityRef<Student> _Student1;
		
		private EntityRef<SurveyQuestion> _SurveyQuestion1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSurveyAnswer1Changing(int value);
    partial void OnSurveyAnswer1Changed();
    partial void OnAnswerChanging(string value);
    partial void OnAnswerChanged();
    partial void OnStudentChanging(int value);
    partial void OnStudentChanged();
    partial void OnSurveyQuestionChanging(int value);
    partial void OnSurveyQuestionChanged();
    #endregion
		
		public SurveyAnswer()
		{
			this._Student1 = default(EntityRef<Student>);
			this._SurveyQuestion1 = default(EntityRef<SurveyQuestion>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="SurveyAnswer", Storage="_SurveyAnswer1", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int SurveyAnswer1
		{
			get
			{
				return this._SurveyAnswer1;
			}
			set
			{
				if ((this._SurveyAnswer1 != value))
				{
					this.OnSurveyAnswer1Changing(value);
					this.SendPropertyChanging();
					this._SurveyAnswer1 = value;
					this.SendPropertyChanged("SurveyAnswer1");
					this.OnSurveyAnswer1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Answer", DbType="VarChar(50)")]
		public string Answer
		{
			get
			{
				return this._Answer;
			}
			set
			{
				if ((this._Answer != value))
				{
					this.OnAnswerChanging(value);
					this.SendPropertyChanging();
					this._Answer = value;
					this.SendPropertyChanged("Answer");
					this.OnAnswerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Student", DbType="Int NOT NULL")]
		public int Student
		{
			get
			{
				return this._Student;
			}
			set
			{
				if ((this._Student != value))
				{
					if (this._Student1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStudentChanging(value);
					this.SendPropertyChanging();
					this._Student = value;
					this.SendPropertyChanged("Student");
					this.OnStudentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SurveyQuestion", DbType="Int NOT NULL")]
		public int SurveyQuestion
		{
			get
			{
				return this._SurveyQuestion;
			}
			set
			{
				if ((this._SurveyQuestion != value))
				{
					if (this._SurveyQuestion1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSurveyQuestionChanging(value);
					this.SendPropertyChanging();
					this._SurveyQuestion = value;
					this.SendPropertyChanged("SurveyQuestion");
					this.OnSurveyQuestionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Student_SurveyAnswer", Storage="_Student1", ThisKey="Student", OtherKey="StudentId", IsForeignKey=true)]
		public Student Student1
		{
			get
			{
				return this._Student1.Entity;
			}
			set
			{
				Student previousValue = this._Student1.Entity;
				if (((previousValue != value) 
							|| (this._Student1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Student1.Entity = null;
						previousValue.SurveyAnswers.Remove(this);
					}
					this._Student1.Entity = value;
					if ((value != null))
					{
						value.SurveyAnswers.Add(this);
						this._Student = value.StudentId;
					}
					else
					{
						this._Student = default(int);
					}
					this.SendPropertyChanged("Student1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SurveyQuestion_SurveyAnswer", Storage="_SurveyQuestion1", ThisKey="SurveyQuestion", OtherKey="SurveyQuestion1", IsForeignKey=true)]
		public SurveyQuestion SurveyQuestion1
		{
			get
			{
				return this._SurveyQuestion1.Entity;
			}
			set
			{
				SurveyQuestion previousValue = this._SurveyQuestion1.Entity;
				if (((previousValue != value) 
							|| (this._SurveyQuestion1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SurveyQuestion1.Entity = null;
						previousValue.SurveyAnswers.Remove(this);
					}
					this._SurveyQuestion1.Entity = value;
					if ((value != null))
					{
						value.SurveyAnswers.Add(this);
						this._SurveyQuestion = value.SurveyQuestion1;
					}
					else
					{
						this._SurveyQuestion = default(int);
					}
					this.SendPropertyChanged("SurveyQuestion1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SurveyQuestions")]
	public partial class SurveyQuestion : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SurveyQuestion1;
		
		private int _Question;
		
		private int _Survey;
		
		private EntitySet<SurveyAnswer> _SurveyAnswers;
		
		private EntityRef<Question> _Question1;
		
		private EntityRef<Survey> _Survey1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSurveyQuestion1Changing(int value);
    partial void OnSurveyQuestion1Changed();
    partial void OnQuestionChanging(int value);
    partial void OnQuestionChanged();
    partial void OnSurveyChanging(int value);
    partial void OnSurveyChanged();
    #endregion
		
		public SurveyQuestion()
		{
			this._SurveyAnswers = new EntitySet<SurveyAnswer>(new Action<SurveyAnswer>(this.attach_SurveyAnswers), new Action<SurveyAnswer>(this.detach_SurveyAnswers));
			this._Question1 = default(EntityRef<Question>);
			this._Survey1 = default(EntityRef<Survey>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="SurveyQuestion", Storage="_SurveyQuestion1", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int SurveyQuestion1
		{
			get
			{
				return this._SurveyQuestion1;
			}
			set
			{
				if ((this._SurveyQuestion1 != value))
				{
					this.OnSurveyQuestion1Changing(value);
					this.SendPropertyChanging();
					this._SurveyQuestion1 = value;
					this.SendPropertyChanged("SurveyQuestion1");
					this.OnSurveyQuestion1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Question", DbType="Int NOT NULL")]
		public int Question
		{
			get
			{
				return this._Question;
			}
			set
			{
				if ((this._Question != value))
				{
					if (this._Question1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnQuestionChanging(value);
					this.SendPropertyChanging();
					this._Question = value;
					this.SendPropertyChanged("Question");
					this.OnQuestionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Survey", DbType="Int NOT NULL")]
		public int Survey
		{
			get
			{
				return this._Survey;
			}
			set
			{
				if ((this._Survey != value))
				{
					if (this._Survey1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSurveyChanging(value);
					this.SendPropertyChanging();
					this._Survey = value;
					this.SendPropertyChanged("Survey");
					this.OnSurveyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SurveyQuestion_SurveyAnswer", Storage="_SurveyAnswers", ThisKey="SurveyQuestion1", OtherKey="SurveyQuestion")]
		public EntitySet<SurveyAnswer> SurveyAnswers
		{
			get
			{
				return this._SurveyAnswers;
			}
			set
			{
				this._SurveyAnswers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Question_SurveyQuestion", Storage="_Question1", ThisKey="Question", OtherKey="QuestionId", IsForeignKey=true)]
		public Question Question1
		{
			get
			{
				return this._Question1.Entity;
			}
			set
			{
				Question previousValue = this._Question1.Entity;
				if (((previousValue != value) 
							|| (this._Question1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Question1.Entity = null;
						previousValue.SurveyQuestions.Remove(this);
					}
					this._Question1.Entity = value;
					if ((value != null))
					{
						value.SurveyQuestions.Add(this);
						this._Question = value.QuestionId;
					}
					else
					{
						this._Question = default(int);
					}
					this.SendPropertyChanged("Question1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Survey_SurveyQuestion", Storage="_Survey1", ThisKey="Survey", OtherKey="SurveyId", IsForeignKey=true)]
		public Survey Survey1
		{
			get
			{
				return this._Survey1.Entity;
			}
			set
			{
				Survey previousValue = this._Survey1.Entity;
				if (((previousValue != value) 
							|| (this._Survey1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Survey1.Entity = null;
						previousValue.SurveyQuestions.Remove(this);
					}
					this._Survey1.Entity = value;
					if ((value != null))
					{
						value.SurveyQuestions.Add(this);
						this._Survey = value.SurveyId;
					}
					else
					{
						this._Survey = default(int);
					}
					this.SendPropertyChanged("Survey1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_SurveyAnswers(SurveyAnswer entity)
		{
			this.SendPropertyChanging();
			entity.SurveyQuestion1 = this;
		}
		
		private void detach_SurveyAnswers(SurveyAnswer entity)
		{
			this.SendPropertyChanging();
			entity.SurveyQuestion1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Teachers")]
	public partial class Teacher : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TeacherId;
		
		private string _TeacherName;
		
		private EntitySet<Survey> _Surveys;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTeacherIdChanging(int value);
    partial void OnTeacherIdChanged();
    partial void OnTeacherNameChanging(string value);
    partial void OnTeacherNameChanged();
    #endregion
		
		public Teacher()
		{
			this._Surveys = new EntitySet<Survey>(new Action<Survey>(this.attach_Surveys), new Action<Survey>(this.detach_Surveys));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TeacherId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int TeacherId
		{
			get
			{
				return this._TeacherId;
			}
			set
			{
				if ((this._TeacherId != value))
				{
					this.OnTeacherIdChanging(value);
					this.SendPropertyChanging();
					this._TeacherId = value;
					this.SendPropertyChanged("TeacherId");
					this.OnTeacherIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TeacherName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string TeacherName
		{
			get
			{
				return this._TeacherName;
			}
			set
			{
				if ((this._TeacherName != value))
				{
					this.OnTeacherNameChanging(value);
					this.SendPropertyChanging();
					this._TeacherName = value;
					this.SendPropertyChanged("TeacherName");
					this.OnTeacherNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Teacher_Survey", Storage="_Surveys", ThisKey="TeacherId", OtherKey="TeacherId")]
		public EntitySet<Survey> Surveys
		{
			get
			{
				return this._Surveys;
			}
			set
			{
				this._Surveys.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Surveys(Survey entity)
		{
			this.SendPropertyChanging();
			entity.Teacher = this;
		}
		
		private void detach_Surveys(Survey entity)
		{
			this.SendPropertyChanging();
			entity.Teacher = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Survey")]
	public partial class Survey : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SurveyId;
		
		private int _TeacherId;
		
		private int _CourseId;
		
		private System.Nullable<System.DateTime> _StartTime;
		
		private System.Nullable<System.DateTime> _EndTime;
		
		private string _DisplayName;
		
		private EntitySet<SurveyQuestion> _SurveyQuestions;
		
		private EntityRef<Course> _Course;
		
		private EntityRef<Teacher> _Teacher;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSurveyIdChanging(int value);
    partial void OnSurveyIdChanged();
    partial void OnTeacherIdChanging(int value);
    partial void OnTeacherIdChanged();
    partial void OnCourseIdChanging(int value);
    partial void OnCourseIdChanged();
    partial void OnStartTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnStartTimeChanged();
    partial void OnEndTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnEndTimeChanged();
    partial void OnDisplayNameChanging(string value);
    partial void OnDisplayNameChanged();
    #endregion
		
		public Survey()
		{
			this._SurveyQuestions = new EntitySet<SurveyQuestion>(new Action<SurveyQuestion>(this.attach_SurveyQuestions), new Action<SurveyQuestion>(this.detach_SurveyQuestions));
			this._Course = default(EntityRef<Course>);
			this._Teacher = default(EntityRef<Teacher>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SurveyId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int SurveyId
		{
			get
			{
				return this._SurveyId;
			}
			set
			{
				if ((this._SurveyId != value))
				{
					this.OnSurveyIdChanging(value);
					this.SendPropertyChanging();
					this._SurveyId = value;
					this.SendPropertyChanged("SurveyId");
					this.OnSurveyIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TeacherId", DbType="Int NOT NULL")]
		public int TeacherId
		{
			get
			{
				return this._TeacherId;
			}
			set
			{
				if ((this._TeacherId != value))
				{
					if (this._Teacher.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTeacherIdChanging(value);
					this.SendPropertyChanging();
					this._TeacherId = value;
					this.SendPropertyChanged("TeacherId");
					this.OnTeacherIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CourseId", DbType="Int NOT NULL")]
		public int CourseId
		{
			get
			{
				return this._CourseId;
			}
			set
			{
				if ((this._CourseId != value))
				{
					if (this._Course.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCourseIdChanging(value);
					this.SendPropertyChanging();
					this._CourseId = value;
					this.SendPropertyChanged("CourseId");
					this.OnCourseIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StartTime", DbType="DateTime")]
		public System.Nullable<System.DateTime> StartTime
		{
			get
			{
				return this._StartTime;
			}
			set
			{
				if ((this._StartTime != value))
				{
					this.OnStartTimeChanging(value);
					this.SendPropertyChanging();
					this._StartTime = value;
					this.SendPropertyChanged("StartTime");
					this.OnStartTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EndTime", DbType="DateTime")]
		public System.Nullable<System.DateTime> EndTime
		{
			get
			{
				return this._EndTime;
			}
			set
			{
				if ((this._EndTime != value))
				{
					this.OnEndTimeChanging(value);
					this.SendPropertyChanging();
					this._EndTime = value;
					this.SendPropertyChanged("EndTime");
					this.OnEndTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DisplayName", DbType="VarChar(50)")]
		public string DisplayName
		{
			get
			{
				return this._DisplayName;
			}
			set
			{
				if ((this._DisplayName != value))
				{
					this.OnDisplayNameChanging(value);
					this.SendPropertyChanging();
					this._DisplayName = value;
					this.SendPropertyChanged("DisplayName");
					this.OnDisplayNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Survey_SurveyQuestion", Storage="_SurveyQuestions", ThisKey="SurveyId", OtherKey="Survey")]
		public EntitySet<SurveyQuestion> SurveyQuestions
		{
			get
			{
				return this._SurveyQuestions;
			}
			set
			{
				this._SurveyQuestions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Course_Survey", Storage="_Course", ThisKey="CourseId", OtherKey="CourseID", IsForeignKey=true)]
		public Course Course
		{
			get
			{
				return this._Course.Entity;
			}
			set
			{
				Course previousValue = this._Course.Entity;
				if (((previousValue != value) 
							|| (this._Course.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Course.Entity = null;
						previousValue.Surveys.Remove(this);
					}
					this._Course.Entity = value;
					if ((value != null))
					{
						value.Surveys.Add(this);
						this._CourseId = value.CourseID;
					}
					else
					{
						this._CourseId = default(int);
					}
					this.SendPropertyChanged("Course");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Teacher_Survey", Storage="_Teacher", ThisKey="TeacherId", OtherKey="TeacherId", IsForeignKey=true)]
		public Teacher Teacher
		{
			get
			{
				return this._Teacher.Entity;
			}
			set
			{
				Teacher previousValue = this._Teacher.Entity;
				if (((previousValue != value) 
							|| (this._Teacher.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Teacher.Entity = null;
						previousValue.Surveys.Remove(this);
					}
					this._Teacher.Entity = value;
					if ((value != null))
					{
						value.Surveys.Add(this);
						this._TeacherId = value.TeacherId;
					}
					else
					{
						this._TeacherId = default(int);
					}
					this.SendPropertyChanged("Teacher");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_SurveyQuestions(SurveyQuestion entity)
		{
			this.SendPropertyChanging();
			entity.Survey1 = this;
		}
		
		private void detach_SurveyQuestions(SurveyQuestion entity)
		{
			this.SendPropertyChanging();
			entity.Survey1 = null;
		}
	}
}
#pragma warning restore 1591
